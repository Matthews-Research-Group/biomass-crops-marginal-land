clear;clc;close all;
plot_options = 1;%1:6
%1: hist;      2:futu;       3: bias(futu-hist)
%4: hist-std;  5:futu-std;   6: bias-std;
ml = ncread('../marginal_land/ml_kaiyu_fraction.nc','layer');
%because this was generated by the writeRaster, we need to flip it
%I choose left-right flip because I simply used contourf to compare it with yield map
ml = fliplr(ml);
yield_hist_ncfile = 'yield_results/multi_crop_yield_mpi_2000_2014_r7.nc';
yield_futu_ncfile = 'yield_results/multi_crop_yield_mpi_2036_2050_r7.nc';
% hardiness_hist_ncfile = 'hardiness/hardiness_CWRF_2000_2014.nc';
% hardiness_futu_ncfile = 'hardiness/hardiness_CWRF_2036_2050.nc';

%these two files are generated by crop_allocation_index_map.m
%they should match the yield results. Check this by version indicator
%in their file names, e.g., *_r7*
crop_allocation_hist = 'crop_allocation_index/max_index_yield_based_hist_r7_new.mat';
crop_allocation_futu = 'crop_allocation_index/max_index_yield_based_futu_r7_new.mat';
%
output_file_prefix  = "figs/xyield_mpi_r7_new_";
yield_threshold = -100; %t/ha
for k = 1:length(plot_options)
    plot_option = plot_options(k);
    if plot_option==1
        yield_all = ncread(yield_hist_ncfile,'yield');
        wue_all   = ncread(yield_hist_ncfile,'wue');
%         hardiness = ncread(hardiness_hist_ncfile,'hardiness');
%         miscanthus = yield_all(:,:,1);
%         miscanthus(~isnan(hardiness)) = nan;
%         yield_all(:,:,1) = miscanthus;
        yield_all(yield_all<yield_threshold) = nan;
        loadfile  = load(crop_allocation_hist);
        max_index = loadfile.max_index1;
        outfile_namekey = 'hist';
        cmins = [0,0,0];
        cmaxs = [40,20,40];
        cmaps = {'colormaps/Blues_6.gpl','colormaps/Greens_6.gpl','colormaps/RdPu_6.gpl'};
    elseif plot_option==2
        yield_all = ncread(yield_futu_ncfile,'yield');
        wue_all   = ncread(yield_futu_ncfile,'wue');
%         hardiness = ncread(hardiness_futu_ncfile,'hardiness');
%         miscanthus = yield_all(:,:,1);
%         miscanthus(~isnan(hardiness)) = nan;
%         yield_all(:,:,1) = miscanthus;
        yield_all(yield_all<yield_threshold) = nan;
        loadfile = load(crop_allocation_futu);
        max_index = loadfile.max_index1;
        outfile_namekey = 'futu';
        cmins = [0,0,0];
        cmaxs = [40,20,40];
        cmaps = {'colormaps/Blues_6.gpl','colormaps/Greens_6.gpl','colormaps/RdPu_6.gpl'};
    elseif plot_option==3
        outfile_namekey = 'bias';
        yield_hist = ncread(yield_hist_ncfile,'yield');
%         hardiness_hist = ncread(hardiness_hist_ncfile,'hardiness');
        yield_futu = ncread(yield_futu_ncfile,'yield');
%         hardiness_futu = ncread(hardiness_futu_ncfile,'hardiness');
        yield_hist(yield_hist<yield_threshold) = nan;
        yield_futu(yield_futu<yield_threshold) = nan;
        %this difference is the difference between the same specie!!!
        yield_diff = yield_futu - yield_hist;        
        loadfile  = load(crop_allocation_hist);
        max_index_hist = loadfile.max_index1;
        loadfile  = load(crop_allocation_futu);
        max_index_futu = loadfile.max_index1;
        %compare futu and hist Index
        max_index_diff = max_index_futu - max_index_hist;
        %find locations that are changed in crop types
        changed_points = find(max_index_diff~=0 & ~isnan(max_index_diff));
        
        yield_hist_1d=zeros(length(changed_points),3);
        yield_futu_1d=zeros(length(changed_points),3);
        for i=1:3
            tmp = yield_hist(:,:,i);
            yield_hist_1d(:,i)=tmp(changed_points);
            tmp = yield_futu(:,:,i);
            yield_futu_1d(:,i)=tmp(changed_points);
        end
        %this is the actual difference between species for the locations
        %with changed crop types
        yield_diff_actual = yield_diff;
        yield_changed_hist = indexing_yield(yield_hist_1d,max_index_hist(changed_points));
        yield_changed_futu = indexing_yield(yield_futu_1d,max_index_futu(changed_points));
        
        for i=1:3
            tmp = yield_diff_actual(:,:,i);
            tmp(changed_points) = yield_changed_futu - yield_changed_hist;
            yield_diff_actual(:,:,i) = tmp;
        end
        yield_all = yield_diff_actual;
        max_index = max_index_futu;
%         %assign a number to these points to remove.
%         %show only the grid points with the same specie.
%         max_index(changed_points) = 99; 
        cmins = -20;
        cmaxs = 20;
        cmaps = {'my_cmap'};
    elseif plot_option==4
        yield_std = ncread(yield_hist_ncfile,'yield_std');
        yield     = ncread(yield_hist_ncfile,'yield');
        yield(yield<yield_threshold)=nan;
        yield_all = yield_std./yield*100;
%         hardiness = ncread(hardiness_hist_ncfile,'hardiness');
        loadfile  = load(crop_allocation_hist);
        max_index = loadfile.max_index1;
        outfile_namekey = 'hist_std_percent';
        cmins = 0; cmaxs = 30;
        cmaps = {parula};
    elseif plot_option==5
        yield_std = ncread(yield_futu_ncfile,'yield_std');
        yield = ncread(yield_futu_ncfile,'yield');
        yield(yield<yield_threshold)=nan;
        yield_all = yield_std./yield*100;
%         hardiness = ncread(hardiness_futu_ncfile,'hardiness');
        loadfile  = load(crop_allocation_futu);
        max_index = loadfile.max_index1;
        outfile_namekey = 'futu_std_percent';
        cmins = 0; cmaxs = 30;
        cmaps = {parula};
    elseif plot_option==6
        outfile_namekey = 'bias_std_percent';
        yield_std = ncread(yield_hist_ncfile,'yield_std');
        yield = ncread(yield_hist_ncfile,'yield');
        yield_hist = yield_std./yield*100;
%         hardiness_hist = ncread(hardiness_hist_ncfile,'hardiness');
   
        yield_std = ncread(yield_futu_ncfile,'yield_std');
        yield = ncread(yield_futu_ncfile,'yield');
        yield_futu = yield_std./yield*100;
    %     wue_all   = ncread('multicrops/multi_crop_yield_mpi_2036_2049.nc','wue');
%         hardiness_futu = ncread(hardiness_futu_ncfile,'hardiness');
        
        yield_hist(yield_hist<yield_threshold)=nan;
        yield_futu(yield_futu<yield_threshold)=nan;
        
        yield_diff = yield_futu - yield_hist;
        
        loadfile  = load(crop_allocation_hist);
        max_index_hist = loadfile.max_index1;
        loadfile  = load(crop_allocation_futu);
        max_index_futu = loadfile.max_index1;
        %compare futu and hist Index
        max_index_diff = max_index_futu - max_index_hist;
        %find locations that are changed in crop types
        changed_points = find(max_index_diff~=0 & ~isnan(max_index_diff));
        
        yield_hist_1d=zeros(length(changed_points),3);
        yield_futu_1d=zeros(length(changed_points),3);
        for i=1:3
            tmp = yield_hist(:,:,i);
            yield_hist_1d(:,i)=tmp(changed_points);
            tmp = yield_futu(:,:,i);
            yield_futu_1d(:,i)=tmp(changed_points);
        end
        %this is the actual difference between species for the locations
        %with changed crop types
        yield_diff_actual = yield_diff;
        yield_changed_hist = indexing_yield(yield_hist_1d,max_index_hist(changed_points));
        yield_changed_futu = indexing_yield(yield_futu_1d,max_index_futu(changed_points));
        
        for i=1:3
            tmp = yield_diff_actual(:,:,i);
            tmp(changed_points) = yield_changed_futu - yield_changed_hist;
            yield_diff_actual(:,:,i) = tmp;
        end
        yield_all = yield_diff_actual;
        
        
        max_index = max_index_futu;
%         %assign a number to these points to remove.
%         %show only the grid points with the same specie.
%         max_index(changed_points) = 99;
        cmins = -10;
        cmaxs = 10;
        cmaps = {'my_cmap'};
    end

    %% yield plots
    titles = {'yield'};
    unit = "Mg/ha";
    %min_val = 0.;  % remove values below this for a better contrast
    subplots_one_multiple_colormaps2(yield_all,strcat(output_file_prefix,outfile_namekey),...
            cmins,cmaxs,cmaps,max_index,ml,titles,unit);
end

function y=indexing_yield(A,index)
    [m,n] = size(A);
    B=A';
    index_1d = index+[0:1:(m-1)]'*n;
    y = B(index_1d);
end
